AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Slack Deployer, process slash commands from slack to interact with AWS Codebuild

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    CodeUri: ./src
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 15

Parameters:
  AppName:
    Description: Slack Deployer
    Type: String
    Default: slack-deployer
  SlackToken:
    Description: Slack Token for Bolt
    Type: String
  #    NoEcho: true
  SlackSignature:
    Description: SLACK SIGNING SECRET
    Type: String
  #    NoEcho: true
  AllowedUsers:
    Description: JSON object containing allowed users to deploy
    Type: CommaDelimitedList
  SupportedApps:
    Type: CommaDelimitedList
    Description: JSON object of supported apps with codebuild scripts names
  GitHubToken:
    Type: String


Resources:
  # API Gateway HTTP API
  HttpApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Ref AppName
      Description: Slack Deployer API
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - POST
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations
  # Lambda Function - uses Globals to define additional configuration values
  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-function'
      Handler: app.handler
      Environment:
        Variables:
          SLACK_BOT_TOKEN: !Sub slack-bot-token-${AWS::StackName}
          SLACK_SIGNING_SECRET: !Ref SlackSignature
          AllowedUsers: !Join [ ",", !Ref AllowedUsers ]
          SupportedApps: !Join [ ",", !Ref SupportedApps ]
          GitHubToken: !Sub githubToken-${AWS::StackName}
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource:
                - !Ref SlackBotTokenSecret
                - !Ref GitHubTokenSecret
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref GitHubTokenSecret

  # Function permissions grant an AWS service or another account permission to use a function
  FunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  GitHubTokenSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub githubToken-${AWS::StackName}
      SecretString: !Ref GitHubToken
      Description: "Secret with dynamically generated secret password."

  SlackBotTokenSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub slack-bot-token-${AWS::StackName}
      SecretString: !Ref SlackToken
      Description: "Slack Bot Token"

Outputs:
  GitHubTokenSecret:
    Value: !Ref GitHubTokenSecret
    Description: GitHubTokenSecret ARN
  MySecretName:
    Value: !Ref GitHubToken
    Description: GitHubToken
  HttpApiEndpoint:
    Description: The default endpoint for the HTTP API.
    Value: !GetAtt HttpApi.ApiEndpoint